week1-day1-admin-setup
# Day 1 – AWS Admin Setup

## Objective
- Secure the AWS root account with MFA.
- Create an IAM admin user (`cl0udadmin`) for daily use instead of root.

## Steps Completed
1. Signed up for AWS Free Tier account.
2. Enabled MFA on the root account.
3. Created IAM user `cl0udadmin` with:
   - AdministratorAccess policy
   - IAMUserChangePassword policy
4. Logged out of root → confirmed login with `cl0udadmin`.

## Key Learnings
- Root account should only be used for billing and emergencies.
- MFA adds a second layer of defense.
- Admin users can be created to handle daily tasks securely.

## Evidence
- MFA successfully enabled for root.
- `cl0udadmin` created and used for login.

week1-day2-iam-readonly/README.md

# Day 2 – IAM Permissions Lab (ReadOnly User)

## Objective
- Understand the principle of least privilege in AWS.
- Compare Admin user vs. ReadOnly user.

## Steps Completed
1. Logged in as `cl0udadmin` (Admin IAM user).
2. Created IAM user `readonly-user` with:
   - Console login enabled
   - ReadOnlyAccess policy attached
3. Logged in as `readonly-user` and tested actions.

## Results
- ✅ Able to view S3 buckets and IAM users.
- ❌ Attempted to create a new S3 bucket → *Access Denied*.
- ❌ Attempted to add a new IAM user → *Access Denied*.

### Example Error Output

```
User: arn:aws:iam::693986728494:user/cl0udreadonly
Action: iam:CreateUser
Resource: arn:aws:iam::693986728494:user/testing-readonly
Result: AccessDenied – no identity-based policy allows the action
```


## Key Learnings
- ReadOnlyAccess policy allows visibility without modification.
- Demonstrates the **Principle of Least Privilege** — users should only have permissions they truly need.

## Evidence
- Verified login as `readonly-user`.
- AWS console produced “Access Denied” when attempting restricted actions.

week1-day3-s3-misconfig/README.md

# Day 3 – S3 Misconfiguration & Fix

## Objective
- Demonstrate a common cloud security risk: public S3 buckets.
- Learn how to identify and remediate misconfigurations.

## Steps Completed
1. Created S3 bucket `earl-labs-bucket-01`.
2. Uploaded `test.txt` and copied the Object URL.
3. Added a public-read bucket policy to simulate misconfiguration.
4. Verified public accessibility in incognito browser (HTTP 200).
5. Removed the bucket policy and re-enabled Block Public Access.
6. Verified access was denied (HTTP 403).

## Results
- ✅ File was visible publicly when misconfigured (HTTP 200).
- ❌ File was blocked after remediation (HTTP 403).

### Example Access Test

#### Public Access (before remediation)
```text
HTTP 200 OK
test.txt contents: Hello from the bucket!
Object URL: https://<your-object-url>

<Error>
  <Code>AccessDenied</Code>
  <Message>Access Denied</Message>
  <RequestId>AD7V8PEPZ7ZTRE9Y</RequestId>
  <HostId>3F3v2csH3X0Ccm1MKxvM5b82IlnVp1aNzgc7XqyqBNv6MAsjiID+qj7Ng1kSQA3vBgUDk9ZCLTpv+Y5kQWyqw8vUJlxXR5n2Z4ynr7jmL3k=</HostId>
</Error>


